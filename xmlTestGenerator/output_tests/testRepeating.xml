<test_method name="testRepeating">
	<statement>final int DELAY_MS = 500;</statement>
	<statement>RepeatingActivity repeating = null;</statement>
	<statement>ActivityQueue queue = new ActivityQueue();</statement>
	<methodCall>queue.start()</methodCall>
	<try>
	<statement>final List<Long> times = Lists.newArrayList();</statement>
	<statement>final CountDownLatch latch = new CountDownLatch(3);</statement>
	<statement>Activity activity = new Activity() {

    @Override
    public void completed(boolean wasSuccessful) {
    }

    @Override
    public Boolean call() throws Exception {
        times.add(System.nanoTime());
        latch.countDown();
        return true;
    }
};</statement>
	<statement>repeating = new RepeatingActivityImpl(null, queue, QueueGroups.MAIN, activity, DELAY_MS);</statement>
	<methodCall>repeating.start()</methodCall>
	<statement>long start = System.nanoTime();</statement>
	<methodCall>Assert.assertTrue(latch.await(5, TimeUnit.SECONDS))</methodCall>
	<methodCall>repeating.close()</methodCall>
	<methodCall>Assert.assertTrue(times.size() >= 3)</methodCall>
	<statement>long check = start;</statement>
	<loopFor condition="[int i = 0]; i < 3; [++i]">
	<statement>long thisTime = times.get(i);</statement>
	<statement>long elapsed = thisTime - check;</statement>
	<methodCall>Assert.assertTrue(elapsed >= (DELAY_MS - (DELAY_MS / 10)), "elapsed: " + elapsed)</methodCall>
	<statement>check = thisTime;</statement>
	</loopFor>
		<finally>
	<methodCall>CloseableUtils.closeQuietly(repeating)</methodCall>
	<methodCall>CloseableUtils.closeQuietly(queue)</methodCall>
		</finally>
	</try>
</test_method>
