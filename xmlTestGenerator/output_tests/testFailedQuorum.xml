<test_method name="testFailedQuorum">
	<statement>ServerList serverList = new ServerList("1:one,2:two,3:three");</statement>
	<statement>RemoteInstanceRequestClient mockClient = new RemoteInstanceRequestClient() {

    @Override
    public void close() throws IOException {
    }

    @Override
    public <T> T getWebResource(URI remoteUri, MediaType type, Class<T> clazz) throws Exception {
        return clazz.cast("foo");
    }
};</statement>
	<statement>ActivityLog log = new ActivityLog(100);</statement>
	<statement>ActivityQueue activityQueue = new ActivityQueue();</statement>
	<statement>Exhibitor mockExhibitor = Mockito.mock(Exhibitor.class);</statement>
	<statement>MonitorRunningInstance mockMonitorRunningInstance = makeMockMonitorRunningInstance();</statement>
	<methodCall>Mockito.when(mockExhibitor.getMonitorRunningInstance()).thenReturn(mockMonitorRunningInstance)</methodCall>
	<methodCall>Mockito.when(mockExhibitor.getLog()).thenReturn(log)</methodCall>
	<methodCall>Mockito.when(mockExhibitor.getActivityQueue()).thenReturn(activityQueue)</methodCall>
	<methodCall>Mockito.when(mockExhibitor.getThisJVMHostname()).thenReturn("one")</methodCall>
	<methodCall>Mockito.when(mockExhibitor.getRemoteInstanceRequestClient()).thenReturn(mockClient)</methodCall>
	<statement>final AtomicLong modified = new AtomicLong(1);</statement>
	<statement>ConfigProvider provider = new ConfigProvider() {

    private volatile ConfigCollection config = new PropertyBasedInstanceConfig(new Properties(), new Properties());

    @Override
    public void start() throws Exception {
    }

    @Override
    public void close() throws IOException {
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception {
        return new LoadedInstanceConfig(config, modified.get());
    }

    @Override
    public PseudoLock newPseudoLock() throws Exception {
        return null;
    }

    @Override
    public LoadedInstanceConfig storeConfig(ConfigCollection config, long compareVersion) throws Exception {
        this.config = config;
        modified.incrementAndGet();
        return loadConfig();
    }
};</statement>
	<statement>InstanceState state = new InstanceState(serverList, InstanceStateTypes.NOT_SERVING, new RestartSignificantConfig(null));</statement>
	<statement>final AtomicBoolean hasBeenCanceled = new AtomicBoolean(false);</statement>
	<statement>ConfigManager manager = new ConfigManager(mockExhibitor, provider, 10) {

    @Override
    public synchronized void cancelRollingConfig(CancelMode mode) throws Exception {
        super.cancelRollingConfig(mode);
        hasBeenCanceled.set(true);
    }
};</statement>
	<methodCall>manager.start()</methodCall>
	<try>
	<statement>Properties properties = new Properties();</statement>
	<methodCall>properties.setProperty(PropertyBasedInstanceConfig.toName(StringConfigs.SERVERS_SPEC, PropertyBasedInstanceConfig.ROOT_PROPERTY_PREFIX), serverList.toSpecString())</methodCall>
	<statement>PropertyBasedInstanceConfig config = new PropertyBasedInstanceConfig(properties, DefaultProperties.get(null));</statement>
	<methodCall>manager.startRollingConfig(config.getRootConfig(), null)</methodCall>
	<statement>String hostname = manager.getRollingConfigState().getRollingHostNames().get(0);</statement>
	<methodCall>Assert.assertTrue(manager.isRolling())</methodCall>
	<statement>RollingReleaseState rollingState = new RollingReleaseState(state, manager.getCollection());</statement>
	<methodCall>Assert.assertEquals(rollingState.getCurrentRollingHostname(), hostname)</methodCall>
	<methodCall>Assert.assertNull(manager.getRollingConfigAdvanceAttempt())</methodCall>
	<methodCall>Mockito.when(mockExhibitor.getThisJVMHostname()).thenReturn(hostname)</methodCall>
	<loopFor condition="[int i = 0]; i < (ConfigManager.DEFAULT_MAX_ATTEMPTS - 1); [++i]">
	<statement>long lastModified = modified.get();</statement>
	<methodCall>manager.checkRollingConfig(state)</methodCall>
	<methodCall>Assert.assertFalse(modified.get() > lastModified)</methodCall>
	<methodCall>Assert.assertFalse(hasBeenCanceled.get())</methodCall>
	</loopFor>
	<methodCall>manager.checkRollingConfig(state)</methodCall>
	<methodCall>Assert.assertTrue(hasBeenCanceled.get())</methodCall>
	<methodCall>Assert.assertFalse(manager.isRolling())</methodCall>
		<finally>
	<methodCall>CloseableUtils.closeQuietly(manager)</methodCall>
		</finally>
	</try>
</test_method>
