<test_method name="testNoChange">
	<statement>MockExhibitorInstance mockExhibitorInstance = new MockExhibitorInstance("a");</statement>
	<methodCall>mockExhibitorInstance.getMockConfigProvider().setConfig(StringConfigs.SERVERS_SPEC, "1:a,2:b,3:c")</methodCall>
	<methodCall>mockExhibitorInstance.getMockConfigProvider().setConfig(IntConfigs.AUTO_MANAGE_INSTANCES, 1)</methodCall>
	<methodCall>mockExhibitorInstance.getMockConfigProvider().setConfig(IntConfigs.AUTO_MANAGE_INSTANCES_SETTLING_PERIOD_MS, 0)</methodCall>
	<methodCall>mockExhibitorInstance.getMockConfigProvider().setConfig(IntConfigs.AUTO_MANAGE_INSTANCES_FIXED_ENSEMBLE_SIZE, 0)</methodCall>
	<statement>List<ServerStatus> statuses = Lists.newArrayList();</statement>
	<methodCall>statuses.add(new ServerStatus("a", InstanceStateTypes.SERVING.getCode(), "", true))</methodCall>
	<methodCall>statuses.add(new ServerStatus("b", InstanceStateTypes.SERVING.getCode(), "", false))</methodCall>
	<methodCall>statuses.add(new ServerStatus("c", InstanceStateTypes.SERVING.getCode(), "", false))</methodCall>
	<methodCall>Mockito.when(mockExhibitorInstance.getMockForkJoinPool().invoke(Mockito.isA(ClusterStatusTask.class))).thenReturn(statuses)</methodCall>
	<statement>final AtomicBoolean configWasChanged = new AtomicBoolean(false);</statement>
	<statement>AutomaticInstanceManagement management = new AutomaticInstanceManagement(mockExhibitorInstance.getMockExhibitor()) {

    @Override
    void adjustConfig(String newSpec, String leaderHostname) throws Exception {
        super.adjustConfig(newSpec, leaderHostname);
        configWasChanged.set(true);
    }
};</statement>
	<methodCall>management.call()</methodCall>
	<methodCall>Assert.assertFalse(configWasChanged.get())</methodCall>
</test_method>
